name: Build OCI

on:
  workflow_call:
    inputs:
      os_version:
        required: true
        type: string
      platforms:
        required: true
        type: string

env:
  GHCR_REGISTRY: ghcr.io/${{ github.repository_owner }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        env:
          OS_VERSION: ${{ inputs.os_version }}
          PLATFORMS_JSON: ${{ inputs.platforms }}
        run: |
          PLATFORMS=$(echo "$PLATFORMS_JSON" | jq -c '.')
          echo "Platforms: $PLATFORMS"

          # Initialize an empty matrix
          MATRIX="{\"include\":[]}"

          # Loop through the platforms to build the matrix
          for platform in $(echo "$PLATFORMS" | jq -r '.[]'); do
            echo "Working on platform: $platform"
            MATRIX=$(echo "$MATRIX" | jq --arg platform "$platform" --arg os_version "$OS_VERSION" \
              '.include += [{"os_version": $os_version, "platform": $platform}]')
          done

          # Minify the JSON
          MATRIX=$(echo "$MATRIX" | jq -c '.')
          echo "Created matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build_image:
    needs: generate_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    outputs:
      OS_VERSION: ${{ matrix.os_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Metadata
        id: metadata
        env:
          IMAGE_SPEC_PATH: ./image.yml
        run: |
          NAME=$(yq eval '.name' $IMAGE_SPEC_PATH)
          TYPE=$(yq eval '.type' $IMAGE_SPEC_PATH)

          if [ "$TYPE" == "base" ]; then
            IMAGE_REGISTRY=$GHCR_REGISTRY/base/$NAME
          else
            IMAGE_REGISTRY=$GHCR_REGISTRY/$NAME
          fi

          echo "NAME=$NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Image
        id: build-image
        env:
          IMAGE_REGISTRY: ${{ steps.metadata.outputs.IMAGE_REGISTRY }}
          NAME: ${{ steps.metadata.outputs.NAME }}
        run: |
          podman build -t $IMAGE_REGISTRY:local \
            --iidfile /tmp/iidfile \
            --build-arg OS_VERSION=${{ matrix.os_version }} \
            .

          IMAGE_ID=$(cat /tmp/iidfile)
          IMAGE_DIGEST=$(podman inspect --format '{{.Digest}}' $IMAGE_ID)

          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=$NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_OUTPUT

      - name: Push Image
        id: push-image
        env:
          IMAGE_DIGEST: ${{ steps.build-image.outputs.IMAGE_DIGEST }}
          IMAGE_REGISTRY: ${{ steps.build-image.outputs.IMAGE_REGISTRY }}
        run: |
          # Push the image with only the digest
          podman push --digestfile=/tmp/digestfile $IMAGE_REGISTRY@${IMAGE_DIGEST}
          REMOTE_IMAGE_DIGEST=$(cat /tmp/digestfile)
          echo "REMOTE_IMAGE_DIGEST=$REMOTE_IMAGE_DIGEST" >> $GITHUB_OUTPUT

      - name: Generate Outputs
        env:
          NAME: ${{ steps.metadata.outputs.NAME }}
          OS_VERSION: ${{ matrix.os_version }}
          PLATFORM: ${{ matrix.platform }}
          DIGEST: ${{ steps.push-image.outputs.REMOTE_IMAGE_DIGEST }}
        run: |
          mkdir -p /tmp/outputs/digests
          echo "$DIGEST" > /tmp/outputs/digests/$NAME-$OS_VERSION-$PLATFORM.txt

      - name: Upload Output Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-image.outputs.IMAGE_NAME }}-${{ inputs.os_version }}-${{ matrix.platform }}
          retention-days: 1
          if-no-files-found: error
          path: |
            /tmp/outputs/digests/*.txt


  manifest:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Metadata
        id: metadata
        env:
          IMAGE_SPEC_PATH: ./image.yml
          OS_VERSION: ${{ needs.build_image.outputs.OS_VERSION }}
        run: |
          NAME=$(yq eval '.name' $IMAGE_SPEC_PATH)
          TYPE=$(yq eval '.type' $IMAGE_SPEC_PATH)

          if [ "$TYPE" == "base" ]; then
            IMAGE_REGISTRY=$GHCR_REGISTRY/base/$NAME
          else
            IMAGE_REGISTRY=$GHCR_REGISTRY/$NAME
          fi

          echo "NAME=$NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY" >> $GITHUB_OUTPUT
          echo "OS_VERSION=$OS_VERSION" >> $GITHUB_OUTPUT

      - name: Fetch Build Outputs
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ steps.metadata.outputs.NAME }}-${{ steps.metadata.outputs.OS_VERSION }}-*
          merge-multiple: true
          path: /tmp/artifacts

      - name: Load Outputs
        id: load-outputs
        run: |
          # Digests
          # Store the digests in a dictionary of platforms to digests
          declare -A DIGESTS
          for digest_file in /tmp/artifacts/${{ steps.metadata.outputs.NAME }}-${{ steps.metadata.outputs.OS_VERSION }}-*.txt; do
            PLATFORM=$(echo $digest_file)
            DIGEST=$(cat $digest_file)
            DIGESTS[$PLATFORM]=$DIGEST
          done

      - name: Show Outputs
        run: cat $GITHUB_OUTPUT

      - name: Create Manifest
        id: create-manifest
        env:
          IMAGE_REGISTRY: ${{ steps.metadata.outputs.IMAGE_REGISTRY }}
        run: |
          podman manifest create ${IMAGE_REGISTRY}
          echo "MANIFEST=$IMAGE_REGISTRY" >> $GITHUB_OUTPUT

      - name: Populate Manifest
        env:
          MANIFEST: ${{ steps.create-manifest.outputs.MANIFEST }}
          PLATFORMS_JSON: ${{ inputs.platforms }}
        run: |
          PLATFORMS=$(echo "$PLATFORMS_JSON" | jq -c '.')
          for platform in $(echo "$PLATFORMS" | jq -r '.[]'); do
            echo "Adding platform: $platform"
            # Get the digest for the platform
            DIGEST=${DIGESTS[$platform]}

            podman manifest add $MANIFEST $IMAGE_REGISTRY@$DIGEST
          done

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Manifest
        env:
          MANIFEST: ${{ steps.create-manifest.outputs.MANIFEST }}
        run: |
          podman manifest push --all=false $MANIFEST
